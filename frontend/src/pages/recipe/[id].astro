---
import Rating from "../../components/Rating.svelte";
import RecipeEdit from "../../components/RecipeEdit.vue";
import RecipeIngredients from "../../components/RecipeIngredients.astro";
import RecipeInspirations from "../../components/RecipeInspirations.vue";
import RecipeMethod from "../../components/RecipeMethod.astro";
import { RecipeById, type RecipeByIdQuery } from "../../generated/graphql";
import Layout from "../../layouts/default.astro";
import { Custom404Error, fetchGraphQL } from "../../shared/fetch-data";

const id = Astro.params.id;

let query: RecipeByIdQuery;
try {
  query = await fetchGraphQL<RecipeByIdQuery>(RecipeById, { id });
} catch (error) {
  if (error instanceof Custom404Error) {
    const port = process.env.PORT ?? 3000;
    const errorPageUrl = `http://localhost:${port}/404?message=${error.message}`;
    const errorPage = await fetch(errorPageUrl);
    return new Response(errorPage.body, {
      headers: errorPage.headers,
      status: 404,
      statusText: "Not Found",
    });
  } else {
    throw error;
  }
}
const recipe = query.recipe;
---

<Layout>
  <div class="flex items-center flex-col md:flex-row">
    <h1 class="h1 md:flex-grow">{recipe?.name}</h1>
    <div class="md:pr-4 pr-0">
      <Rating client:only id={id} />
    </div>
  </div>
  <div class="flex">
    <div class="sm:w-11/12 w-full">
      <RecipeIngredients recipe={recipe} />
    </div>
    <div class="sm:w-1/12 sm:block hidden">
      <RecipeEdit recipe={recipe} />
    </div>
  </div>
  <RecipeMethod recipe={recipe} />
  <RecipeInspirations recipe={recipe} />
</Layout>
