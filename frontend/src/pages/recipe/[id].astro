---
import Rating from "../../components/Rating.svelte";
import RecipeEdit from "../../components/RecipeEdit.vue";
import RecipeImage from "../../components/RecipeImage.astro";
import RecipeIngredients from "../../components/RecipeIngredients.astro";
import RecipeInspirations from "../../components/RecipeInspirations.vue";
import RecipeMethod from "../../components/RecipeMethod.astro";
import { RecipeById, type RecipeByIdQuery } from "../../generated/graphql";
import Layout from "../../layouts/default.astro";
import { fetchGraphQL } from "../../shared/fetch-data";
import { handleError } from "../../shared/handle-error";

const id = Astro.params.id;

let recipe: RecipeByIdQuery["recipe"];
try {
  const query = await fetchGraphQL<RecipeByIdQuery>(RecipeById, { id });
  recipe = query.recipe;
} catch (error) {
  return await handleError(error);
}
---

<Layout>
  <div class="flex items-center flex-col md:flex-row">
    <div class="pt-6 md:hidden max-w-sm">
      <RecipeImage image={recipe?.image} />
    </div>
    <h1 class="h1 md:flex-grow">{recipe?.name}</h1>
    <div class="flex flex-col md:flex-row items-center">
      <Rating client:only id={id} />
      <div class="p-2"></div>
      <RecipeEdit client:only recipe={recipe} />
    </div>
  </div>
  <div class="hidden md:flex md:flex-col md:items-center">
    <RecipeImage image={recipe?.image} />
  </div>
  <div class="flex">
    <div class="w-full">
      <RecipeIngredients recipe={recipe} />
    </div>
  </div>
  <RecipeMethod recipe={recipe} />
  <RecipeInspirations recipe={recipe} />
</Layout>
